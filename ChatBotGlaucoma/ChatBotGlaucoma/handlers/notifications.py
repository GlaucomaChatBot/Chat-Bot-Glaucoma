from aiogram.types import CallbackQuery
from aiogram import F, Router
from instance import db, bot
from keyboards import inline
from datetime import datetime, timedelta
import asyncio

router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
active_notifications = {}  # {notification_key: timestamp}
pending_confirmations = {}  # {confirmation_key: data}
last_notification_check = datetime.min  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

async def send_medication_reminders():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∏—ë–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤"""
    global last_notification_check
    
    while True:
        try:
            current_time = datetime.now()
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            if (current_time - last_notification_check).total_seconds() < 10:
                await asyncio.sleep(1)
                continue
                
            last_notification_check = current_time
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
            all_medications = []
            patients = db.get_all_patients()
            
            for patient in patients:
                meds = db.get_patient_medications(patient['patient_id'])
                for med in meds:
                    med['patient_id'] = patient['patient_id']
                    all_medications.append(med)
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await cleanup_old_notifications()
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏–µ–º–∞
            for med in all_medications:
                patient_id = med['patient_id']
                med_id = med['medication_id']
                
                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞
                try:
                    start_time = datetime.strptime(med['start_time'], "%H:%M:%S").time()
                except ValueError:
                    print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ {med['name']}")
                    continue
                
                # –¢–µ–∫—É—â–∏–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
                now = current_time
                today = now.date()
                current_time_only = now.time()
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞
                first_intake_today = datetime.combine(today, start_time)
                
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
                if current_time_only < start_time:
                    next_intake = first_intake_today
                else:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø—Ä–æ—à–ª–æ
                    elapsed = now - first_intake_today
                    intervals_passed = elapsed.total_seconds() // (med['interval_minutes'] * 60)
                    next_intake = first_intake_today + timedelta(minutes=med['interval_minutes'] * (intervals_passed + 1))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –Ω–∞—Å—Ç—É–ø–∏–ª–æ –∏–ª–∏ –Ω–∞—Å—Ç—É–ø–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
                time_diff = (next_intake - now).total_seconds()
                if 0 <= time_diff < 10:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –Ω–∞—Å—Ç—É–ø–∏–ª–æ –∏–ª–∏ –Ω–∞—Å—Ç—É–ø–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 10 —Å–µ–∫—É–Ω–¥
                    notification_key = f"{patient_id}_{med_id}_{next_intake.strftime('%Y%m%d_%H%M')}"
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                    if notification_key in active_notifications:
                        continue
                    
                    try:
                        # –ñ–¥–µ–º —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞
                        if time_diff > 0:
                            await asyncio.sleep(time_diff)
                        
                        # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —Å–Ω–∞
                        current_time_after_sleep = datetime.now()
                        if abs((next_intake - current_time_after_sleep).total_seconds()) > 30:
                            continue
                            
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await bot.send_message(
                            chat_id=patient_id,
                            text=f"üíä –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ!\n\n"
                                 f"üî∏ {med['name']}\n"
                                 f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞: {next_intake.strftime('%H:%M')}\n"
                                 f"‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å 30 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–µ–º–∞",
                            reply_markup=inline.get_confirmation_keyboard(med_id, next_intake)
                        )
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        active_notifications[notification_key] = next_intake
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                        pending_confirmations[notification_key] = {
                            'patient_id': patient_id,
                            'med_id': med_id,
                            'notification_time': next_intake,
                            'scheduled_time': next_intake
                        }
                        
                        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ {next_intake.strftime('%H:%M:%S')}: {notification_key}")
                        
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç—É {patient_id}: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await check_overdue_confirmations()
            
            await asyncio.sleep(5)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ send_medication_reminders: {e}")
            await asyncio.sleep(10)

async def cleanup_old_notifications():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    current_time = datetime.now()
    old_keys = []
    
    for key, timestamp in active_notifications.items():
        # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
        if (current_time - timestamp).total_seconds() > 3600:
            old_keys.append(key)
    
    for key in old_keys:
        del active_notifications[key]

async def check_overdue_confirmations():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"""
    current_time = datetime.now()
    overdue_keys = []
    
    for key, confirmation in pending_confirmations.items():
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (current_time - confirmation['notification_time']).total_seconds() > 1800:
            patient_id = confirmation['patient_id']
            med_id = confirmation['med_id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if not db.check_intake(patient_id, med_id):
                db.log_missed_intake(patient_id, med_id, confirmation['notification_time'])
                await notify_doctor_missed_intake(patient_id, med_id, confirmation['notification_time'])
                print(f"–ü—Ä–∏–µ–º –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π: {key}")
            
            overdue_keys.append(key)
    
    # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    for key in overdue_keys:
        del pending_confirmations[key]

async def notify_doctor_missed_intake(patient_id: int, med_id: int, scheduled_time: datetime):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –≤—Ä–∞—á–∞ –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–º –ø—Ä–∏–µ–º–µ"""
    try:
        doctor_id = db.get_doctor_id_by_patient(patient_id)
        if doctor_id:
            patient = db.get_patient(patient_id)
            medication = db.get_medication(med_id)
            
            if patient and medication:
                patient_name = patient.get('name', f'–ü–∞—Ü–∏–µ–Ω—Ç {patient_id}')
                med_name = medication['name']
                
                await bot.send_message(
                    chat_id=doctor_id,
                    text=f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –ø—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞\n\n"
                         f"üë§ –ü–∞—Ü–∏–µ–Ω—Ç: {patient_name}\n"
                         f"üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–æ: {med_name}\n"
                         f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {scheduled_time.strftime('%d.%m.%Y %H:%M')}\n"
                         f"‚ùå –ü—Ä–∏–µ–º –Ω–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç"
                )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –≤—Ä–∞—á–∞ –æ –ø—Ä–æ–ø—É—Å–∫–µ: {e}")

@router.callback_query(F.data.startswith("confirm_"))
async def confirm_medication(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—ë–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    try:
        print(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {callback.data}")
        
        parts = callback.data.split("_")
        medication_id = int(parts[1])
        patient_id = callback.from_user.id
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º scheduled_time –∏–∑ callback_data
        scheduled_time = None
        if len(parts) > 2:
            try:
                # –§–æ—Ä–º–∞—Ç: confirm_123_20230715_1530
                date_str = parts[2]
                time_str = parts[3]
                scheduled_time = datetime.strptime(f"{date_str} {time_str}", "%Y%m%d %H%M")
                print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞: {scheduled_time}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                scheduled_time = datetime.now()
        else:
            scheduled_time = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if db.check_specific_intake(patient_id, medication_id, scheduled_time):
            await callback.answer("‚ùå –í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —ç—Ç–æ—Ç –ø—Ä–∏—ë–º —Ä–∞–Ω–µ–µ!", show_alert=True)
            return
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∏—ë–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = db.log_intake(patient_id, medication_id, scheduled_time)
        if success:
            med = db.get_medication(medication_id)
            if med:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.edit_text(
                    text=f"‚úÖ –ü—Ä–∏—ë–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ '{med['name']}' —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n"
                         f"‚è∞ –í—Ä–µ–º—è: {scheduled_time.strftime('%d.%m.%Y %H:%M')}",
                    reply_markup=None
                )
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                confirmation_key = f"{patient_id}_{medication_id}_{scheduled_time.strftime('%Y%m%d_%H%M')}"
                if confirmation_key in pending_confirmations:
                    del pending_confirmations[confirmation_key]
                    print(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {confirmation_key}")
            else:
                await callback.message.edit_text(
                    text="‚ùå –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É.",
                    reply_markup=None
                )
        else:
            await callback.message.edit_text(
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=None
            )
        
        await callback.answer()
    except Exception as e:
        import traceback
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ confirm_medication: {e}\n{traceback.format_exc()}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –°–æ–æ–±—â–∏—Ç–µ –≤—Ä–∞—á—É.", show_alert=True)