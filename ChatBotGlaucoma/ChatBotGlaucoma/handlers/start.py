from aiogram.types import Message, CallbackQuery
from aiogram import F, Router
from aiogram.filters import Command
from instance import main_router, db, bot, user_states
from keyboards import reply, inline
from datetime import datetime, timedelta
import asyncio
import re
import sqlite3
from typing import List, Dict

@main_router.message(Command("start"))
async def start_handler(message: Message):
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –∫–∞–∫ –ø–∞—Ü–∏–µ–Ω—Ç –∏–ª–∏ –≤—Ä–∞—á
    patient = db.get_patient(user_id)
    doctor = db.get_doctor(user_id)
    
    if not patient and not doctor:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –≤—Ä–∞—á –∏–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç?",
            reply_markup=await reply.role_selection_keyboard()
        )
    elif doctor:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –¥–æ–∫—Ç–æ—Ä!",
            reply_markup=await reply.doctor_menu_keyboard()
        )
    else:
        await show_main_menu(message)

@main_router.message(F.text == "–Ø –≤—Ä–∞—á")
async def register_doctor(message: Message):
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    try:
        db.add_doctor(user_id, full_name)
        await message.answer(
            "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤—Ä–∞—á!",
            reply_markup=await reply.doctor_menu_keyboard()
        )
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–∞—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–∞—á–∞: {e}")

@main_router.message(F.text == "–Ø –ø–∞—Ü–∏–µ–Ω—Ç")
async def register_patient(message: Message):
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –∫–∞–∫ –ø–∞—Ü–∏–µ–Ω—Ç
    if db.get_patient(user_id):
        await message.answer(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–∞—Ü–∏–µ–Ω—Ç!",
            reply_markup=await reply.main_menu_keyboard()
        )
        return
    
    # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞
    if not db.add_patient(user_id, full_name):
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=await reply.role_selection_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π
    doctors = db.get_all_doctors()
    
    if not doctors:
        # –ï—Å–ª–∏ –≤—Ä–∞—á–µ–π –Ω–µ—Ç - —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–∞—Ü–∏–µ–Ω—Ç–∞
        await message.answer(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤—Ä–∞—á–µ–π. –í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–∞—á–∞ –ø–æ–∑–∂–µ.",
            reply_markup=await reply.main_menu_keyboard()
        )
    else:
        # –ï—Å–ª–∏ –≤—Ä–∞—á–∏ –µ—Å—Ç—å - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
        keyboard = inline.get_doctor_selection_keyboard(doctors)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ –≤—Ä–∞—á–∞
        await message.answer(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –≤—Ä–∞—á–∞:",
            reply_markup=await reply.main_menu_keyboard()
        )
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=keyboard
        )

@main_router.message(F.text == "–ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã")
async def show_doctor_patients(message: Message):
    user_id = message.from_user.id
    doctor = db.get_doctor(user_id)
    
    if not doctor:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤—Ä–∞—á!")
        return
    
    patients = db.get_patients_by_doctor(user_id)
    
    if not patients:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤.")
        return
    
    response = "üë• –í–∞—à–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã:\n\n"
    for patient in patients:
        patient_name = patient.get('name', f'–ü–∞—Ü–∏–µ–Ω—Ç {patient["patient_id"]}')
        response += f"üë§ {patient_name}\n"
        response += f"ID: {patient['patient_id']}\n"
        response += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    await message.answer(response)

async def show_main_menu(message: Message):
    user_id = message.from_user.id
    patient = db.get_patient(user_id)
    if patient and not patient.get('doctor_id'):
        await message.answer(
            "–í–Ω–∏–º–∞–Ω–∏–µ: –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–∞—á–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=await reply.main_menu_keyboard()
        )
    else:
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=await reply.main_menu_keyboard()
        )

@main_router.message(F.text == "–ú–æ–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
async def show_medications(message: Message):
    user_id = message.from_user.id
    medications = db.get_patient_medications(user_id)
    if medications:
        for med in medications:
            response = f"- {med['name']} (–Ω–∞—á–∞–ª–æ: {med['start_time']}, –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {med['interval_hours']} —á–∞—Å–æ–≤)"
            await message.answer(
                response,
                reply_markup=inline.get_medication_management_keyboard(med['medication_id'])
            )
    else:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤.",
            reply_markup=await reply.main_menu_keyboard()
        )

@main_router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ")
async def add_medication(message: Message):
    user_id = message.from_user.id
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '12:00') –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6 –¥–ª—è 6 —á–∞—Å–æ–≤), —Ä–∞–∑–¥–µ–ª—è—è –ø—Ä–æ–±–µ–ª–∞–º–∏:\n–ü—Ä–∏–º–µ—Ä: '–ö—Å–∏–ª–æ–∫—Ç 12:00 6'",
        reply_markup=await reply.cancel_keyboard()
    )
    user_states[user_id] = "waiting_for_medication"

@main_router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_action(message: Message):
    user_id = message.from_user.id
    if user_id in user_states:
        del user_states[user_id]
    await show_main_menu(message)

@main_router.message(lambda message: message.from_user.id in user_states and 
                   user_states[message.from_user.id] == "waiting_for_medication")
async def process_add_medication(message: Message):
    user_id = message.from_user.id
    try:
        del user_states[user_id]
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: '–ê—Å–ø–∏—Ä–∏–Ω 08:00 6'",
                               reply_markup=await reply.main_menu_keyboard())
            return

        name, start_time, interval_str = parts[0], parts[1], parts[2]
        
        try:
            interval = int(interval_str)
            if interval <= 0:
                raise ValueError("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0")
                
            if not re.match(r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$', start_time):
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM")
                
        except ValueError as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}",
                               reply_markup=await reply.main_menu_keyboard())
            return

        full_time = f"{start_time}:00"
        
        try:
            med_id = db.add_medication(name, full_time, interval)
            if med_id and db.assign_medication(user_id, med_id):
                await message.answer(
                    f"‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
                    f"‚è∞ –ü–µ—Ä–≤—ã–π –ø—Ä–∏–µ–º –≤ {start_time}\n"
                    f"üîÑ –ü–æ–≤—Ç–æ—Ä –∫–∞–∂–¥—ã–µ {interval} —á–∞—Å–æ–≤",
                    reply_markup=await reply.main_menu_keyboard()
                )
            else:
                raise Exception("–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
                
        except sqlite3.Error as e:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=await reply.main_menu_keyboard()
            )
            print(f"Database error: {e}")
            
    except Exception as e:
        await message.answer(
            "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=await reply.main_menu_keyboard()
        )
        print(f"Unexpected error: {e}")

@main_router.message(F.text == "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–≤")
async def show_intake_history(message: Message):
    user_id = message.from_user.id
    history = db.get_intake_history(user_id)
    
    if history:
        response = "üìÖ –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø—Ä–∏—ë–º–æ–≤:\n\n"
        for record in history:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            intake_time = datetime.strptime(record['intake_time'], "%Y-%m-%d %H:%M:%S")
            response += f"üíä {record['medication_name']}\n"
            response += f"‚è∞ {intake_time.strftime('%d.%m.%Y %H:%M')}\n"
            response += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    else:
        response = "üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–≤ –ø—É—Å—Ç–∞. –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–∏—ë–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤."
    
    await message.answer(response, reply_markup=await reply.main_menu_keyboard())

@main_router.message(F.text == "–í—ã–±—Ä–∞—Ç—å —Å–≤–æ–µ–≥–æ –≤—Ä–∞—á–∞")
async def choose_doctor(message: Message):
    user_id = message.from_user.id
    doctors = db.get_all_doctors()
    if not doctors:
        await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–µ–π.")
        return
    keyboard = inline.get_doctor_selection_keyboard(doctors)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –≤—Ä–∞—á–∞:", reply_markup=keyboard)

@main_router.callback_query(F.data.startswith("select_doctor_"))
async def process_doctor_selection(callback: CallbackQuery):
    user_id = callback.from_user.id
    doctor_id = int(callback.data.split("_")[2])
    if db.update_patient_doctor(user_id, doctor_id):
        await callback.message.edit_text(
            f"–í—Ä–∞—á —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∫–∞–∫ –≤–∞—à –¥–æ–∫—Ç–æ—Ä!",
            reply_markup=None
        )
        await callback.answer()
    else:
        await callback.message.edit_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤—Ä–∞—á–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
            reply_markup=None
        )
        await callback.answer()

@main_router.callback_query(F.data.startswith("delete_med_"))
async def delete_medication(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    try:
        medication_id = int(callback.data.split("_")[2])
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        patient_medications = db.get_patient_medications(user_id)
        medication_ids = [med['medication_id'] for med in patient_medications]
        
        if medication_id not in medication_ids:
            await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ!", show_alert=True)
            return
            
        if db.delete_medication(medication_id):
            await callback.message.edit_text(
                text="‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
                reply_markup=None
            )
        else:
            await callback.message.edit_text(
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.",
                reply_markup=None
            )
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ delete_medication: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", show_alert=True)